# GitHub Actions CI/CD 管道
# 自動建構 Docker 映像並推送到 GitHub Container Registry

name: Docker Build and Push

on:
  # 當推送到 main 分支時觸發
  push:
    branches: [ "main", "master" ]
    tags: [ 'v*.*.*' ]
  
  # 當建立 Pull Request 時觸發（僅建構，不推送）
  pull_request:
    branches: [ "main", "master" ]
  
  # 允許手動觸發
  workflow_dispatch:

env:
  # GitHub Container Registry
  REGISTRY: ghcr.io
  # 映像名稱（會自動使用倉庫名稱）
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 程式碼品質檢查
  quality-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4
    
    - name: 設定 Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: 安裝 UV
      run: pip install uv
      
    - name: 設定 UV 緩存
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-
    
    - name: 安裝依賴
      run: uv sync --frozen --cache-dir ~/.cache/uv
    
    - name: 程式碼風格檢查 (Ruff)
      run: |
        uv run ruff check src/
        uv run ruff format --check src/
      continue-on-error: true  # 暫時允許風格檢查失敗
    
    - name: 類型檢查 (mypy)
      run: uv run mypy src/
      continue-on-error: true  # 暫時允許類型檢查失敗
    
    - name: 基本功能測試
      run: |
        # 建立測試環境變數檔案
        cat > .env << 'EOF'
        # CI 測試環境變數
        COMPANY_ID=test_company
        USER_ID=test_user
        PASSWORD=test_password
        CLOCK_IN_TIME=09:00
        CLOCK_OUT_TIME=18:00
        SCHEDULE_ENABLED=false
        WEEKDAYS_ONLY=true
        STATUS_MESSAGE_INTERVAL=300
        GPS_LATITUDE=25.1
        GPS_LONGITUDE=121.5
        GPS_ADDRESS=台北市
        DEBUG=false
        HEADLESS=true
        WEBHOOK_ENABLED=false
        EOF
        
        # 測試配置載入
        uv run python -c "
        import sys
        sys.path.insert(0, 'src')
        from config import config_manager
        config_manager.load_config()
        print('✅ 配置系統正常')
        "
        
        # 測試模組載入
        uv run python -c "
        import sys
        sys.path.insert(0, 'src')
        from punch_clock import PunchClockService
        from scheduler import scheduler_manager
        from models import PunchAction
        print('✅ 模組載入正常')
        "
    
    - name: 安裝 Playwright 瀏覽器
      run: uv run playwright install chromium
      
    - name: 視覺化測試驗證
      run: |
        # 測試視覺化模組可以正常載入
        uv run python -c "
        import sys
        sys.path.insert(0, 'src')
        from punch_clock import PunchClockService
        from models.testing import VisualTestResult, TestStep, ScreenshotInfo
        print('✅ 視覺化測試模組正常')
        "
        
        # 測試 Playwright 瀏覽器安裝
        uv run python -c "
        from playwright.sync_api import sync_playwright
        with sync_playwright() as p:
            browser = p.chromium.launch(headless=True)
            browser.close()
        print('✅ Playwright 瀏覽器正常')
        "

  # Docker 建構和推送
  docker-build-push:
    needs: quality-check
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4
    
    - name: 設定 Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 登入 Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 提取 metadata（標籤、標記）
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: 建構和推送 Docker 映像
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        target: runtime

  # 安全性掃描
  security-scan:
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: 設定映像名稱
      id: image
      run: |
        IMAGE_NAME=$(echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" | tr '[:upper:]' '[:lower:]')
        echo "name=$IMAGE_NAME" >> $GITHUB_OUTPUT
    
    - name: 執行 Trivy 漏洞掃描
      uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: ${{ steps.image.outputs.name }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: 上傳 Trivy 掃描結果到 GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
